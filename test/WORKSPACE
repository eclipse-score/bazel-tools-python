workspace(name = "bazel_tools_python_test")

# This workspace loads local dependencies from bazel_tools_python for testing purposes.
# Ideally each user workspace will have its own set of local dependencies.

local_repository(
    name = "bazel_tools_python",
    path = "..",
)

##########################
# Internal dependencies. #
##########################

load("@bazel_tools_python//third_party/bazel_skylib:bazel_skylib.bzl", "bazel_skylib")

bazel_skylib()

load("@bazel_skylib//:workspace.bzl", "bazel_skylib_workspace")

bazel_skylib_workspace()

load("@bazel_tools_python//third_party/rules_python:rules_python.bzl", "rules_python")

rules_python()

load("@rules_python//python:repositories.bzl", "py_repositories")

py_repositories()

######################################
# Python toolchain and dependencies. #
######################################

load("@bazel_tools_python//bazel/toolchains/python:versions.bzl", "PYTHON_VERSIONS")
load("@rules_python//python:repositories.bzl", "python_register_toolchains")  # buildifier: disable=same-origin-load

[
    python_register_toolchains(
        name = "test_python_{}".format(version.replace(".", "_")),
        ignore_root_user_error = True,
        python_version = "{}".format(version),
        register_coverage_tool = True,
        register_toolchains = True,
    )
    for version in PYTHON_VERSIONS
]

load("@rules_python//python:pip.bzl", "pip_parse")
load("@test_python_3_10//:defs.bzl", python_3_10_interpreter = "interpreter")  # buildifier: disable=out-of-order-load
load("@test_python_3_11//:defs.bzl", python_3_11_interpreter = "interpreter")  # buildifier: disable=out-of-order-load
load("@test_python_3_12//:defs.bzl", python_3_12_interpreter = "interpreter")  # buildifier: disable=out-of-order-load
load("@test_python_3_8//:defs.bzl", python_3_8_interpreter = "interpreter")  # buildifier: disable=out-of-order-load
load("@test_python_3_9//:defs.bzl", python_3_9_interpreter = "interpreter")  # buildifier: disable=out-of-order-load

# buildifier: disable=unsorted-dict-items
python_interpreter_versions = {
    "3.8": python_3_8_interpreter,
    "3.9": python_3_9_interpreter,
    "3.10": python_3_10_interpreter,
    "3.11": python_3_11_interpreter,
    "3.12": python_3_12_interpreter,
}

[
    pip_parse(
        name = "test_pip_{}".format(version.replace(".", "_")),
        extra_pip_args = ["--no-cache-dir"],
        python_interpreter_target = python_interpreter_versions[version],
        requirements_lock = "@bazel_tools_python_test//pip:requirements_lock_{}.txt".format(version.replace(".", "_")),
    )
    for version in python_interpreter_versions
]

load("@test_pip_3_10//:requirements.bzl", pip_install_deps_py_3_10 = "install_deps")  # buildifier: disable=out-of-order-load
load("@test_pip_3_11//:requirements.bzl", pip_install_deps_py_3_11 = "install_deps")  # buildifier: disable=out-of-order-load
load("@test_pip_3_12//:requirements.bzl", pip_install_deps_py_3_12 = "install_deps")  # buildifier: disable=out-of-order-load
load("@test_pip_3_8//:requirements.bzl", pip_install_deps_py_3_8 = "install_deps")  # buildifier: disable=out-of-order-load
load("@test_pip_3_9//:requirements.bzl", pip_install_deps_py_3_9 = "install_deps")  # buildifier: disable=out-of-order-load

pip_install_deps_py_3_8()

pip_install_deps_py_3_9()

pip_install_deps_py_3_10()

pip_install_deps_py_3_11()

pip_install_deps_py_3_12()

load("@bazel_tools_python//bazel/rules:rules_python_pip_hub.bzl", "rules_python_pip_hub")

rules_python_pip_hub(
    name = "test_pip_hub",
    deps_to_config_map = {
        "@test_pip_{}".format(version.replace(".", "_")): "@bazel_tools_python//bazel/toolchains/python:python_{}".format(version.replace(".", "_"))
        for version in PYTHON_VERSIONS
    },
    requirements_in = "@bazel_tools_python_test//pip:requirements.in",
)

###########################
# Dependencies from bazel_tools_python. #
###########################

load("@bazel_tools_python//third_party:python_toolchains.bzl", bazel_tools_python_python_toolchains = "python_toolchains")

bazel_tools_python_python_toolchains()

load("@bazel_tools_python//third_party:python_pip_parse.bzl", bazel_tools_python_python_pip_parse = "python_pip_parse")

bazel_tools_python_python_pip_parse()

load("@bazel_tools_python//third_party:python_pip_hub.bzl", bazel_tools_python_python_pip_hub = "python_pip_hub")

bazel_tools_python_python_pip_hub()
